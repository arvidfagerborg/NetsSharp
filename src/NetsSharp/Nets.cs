[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("NetsSharp.IntegrationTests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("NetsSharp.UnitTests")]

namespace NetsSharp
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Exceptions;
    using Models;

    public class Nets
    {
        private readonly string _merchantId;

        private readonly string _token;

        private readonly IApiCaller _caller;

        private readonly IEndpoints _endpoints;

        public static Nets Create(string merchantId, string token, IEndpoints endpoints)
        {
            return new Nets(merchantId, token, new HttpClientApiCaller(), endpoints);
        }

        internal Nets(string merchantId, string token, IApiCaller caller, IEndpoints endpoints)
        {
            _merchantId = merchantId;
            _token = token;
            _caller = caller;
            _endpoints = endpoints;
        }

        public Uri GetTerminalEndpoint(string transactionId)
        {
            var ub = new UriBuilder(_endpoints.Terminal);
            var qb = new HttpQueryBuilder();
            qb.Add("merchantId", _merchantId);
            qb.Add("transactionId", transactionId);
            ub.Query = qb.ToString();
            return ub.Uri;
        }

        /// <summary>
        /// The purpose of the register call is to send all the data needed to complete a transaction to Netaxept servers. The input data is organized into a RegisterRequest, and the output data is formatted as a RegisterResponse.
        /// </summary>
        /// <param name="orderNumber">The order number is an ID generated by merchant. This number will be sent to issuer and will appear on cardholder's statement. Digits and letters allowed execpt specialty characers and scandinavian letters like Æ Ø Å. Validation: Alpha with charaters within range hex 21 to hex 7E (decimal 33 to decimal 126) in the ASCII table.</param>
        /// <param name="amountInCents">The amount as the lowest monetary unit. For dollars, this would be cents.</param>
        /// <param name="currencyCode">The currency code, following ISO 4217. Typical examples include "NOK" and "USD".</param>
        /// <param name="options">Extra options</param>
        /// <returns>Transaction ID</returns>
        public async Task<string> RegisterAsync(string orderNumber, int amountInCents, string currencyCode,
            RegisterOptions options = null)
        {
            var rb = new RequestBuilder();
            var uri = rb.GetUri(_endpoints.Register, new Dictionary<string, string>
            {
                {"merchantId", _merchantId},
                {"token", _token},
                {"orderNumber", orderNumber},
                {"amount", amountInCents.ToString()},
                {"currencyCode", currencyCode.ToUpperInvariant()}
            }, options ?? new RegisterOptions());
            var response = await _caller.CallAsync<RegisterResponse>(uri);
            return response.TransactionId;
        }

        public async Task<PaymentInfo> QueryAsync(string transactionId)
        {
            var rb = new RequestBuilder();
            var uri = rb.GetUri(_endpoints.Query, new Dictionary<string, string>
            {
                {"merchantId", _merchantId},
                {"token", _token},
                {"transactionId", transactionId}
            });
            return await _caller.CallAsync<PaymentInfo>(uri);
        }

        public static bool InterpretResponseCode(string responseCode)
        {
            if (responseCode.ToUpperInvariant() == "OK") return true;

            var parts = responseCode.Split(',');
            var errors = parts.Select(p => new KeyValuePair<ResponseCodeField, ResponseCodeError>(
                (ResponseCodeField) Enum.Parse(typeof(ResponseCodeField), p.Split(':')[0], true),
                (ResponseCodeError) Enum.Parse(typeof(ResponseCodeError), p.Split(':')[1], true)));
            throw new InvalidResponseException(errors);
        }

        #region Process operations

        private const string OperationSale = "SALE";
        private const string OperationAuth = "AUTH";
        private const string OperationCapture = "CAPTURE";
        private const string OperationVerify = "VERIFY";
        private const string OperationCredit = "CREDIT";
        private const string OperationAnnul = "ANNUL";

        private async Task ProcessInternalAsync(string operation, string transactionId,
            ProcessRequestOptions options = null)
        {
            var rb = new RequestBuilder();
            var uri = rb.GetUri(_endpoints.Process, new Dictionary<string, string>
            {
                {"merchantId", _merchantId},
                {"token", _token},
                {"transactionId", transactionId},
                {"operation", operation}
            }, options ?? new ProcessRequestOptions());
            var response = await _caller.CallAsync<ProcessResponse>(uri);
            if (response.ResponseCode != "OK")
            {
                throw new ProcessException(response);
            }
        }

        public async Task SaleAsync(string transactionId, ProcessRequestOptions options = null)
        {
            await ProcessInternalAsync(OperationSale, transactionId, options);
        }

        public async Task AuthAsync(string transactionId, ProcessRequestOptions options)
        {
            await ProcessInternalAsync(OperationAuth, transactionId, options);
        }

        public async Task CaptureAsync(string transactionId, ProcessRequestOptions options)
        {
            await ProcessInternalAsync(OperationCapture, transactionId, options);
        }

        public async Task VerifyAsync(string transactionId, ProcessRequestOptions options)
        {
            await ProcessInternalAsync(OperationVerify, transactionId, options);
        }

        public async Task CreditAsync(string transactionId, ProcessRequestOptions options)
        {
            await ProcessInternalAsync(OperationCredit, transactionId, options);
        }

        public async Task AnnulAsync(string transactionId, ProcessRequestOptions options)
        {
            await ProcessInternalAsync(OperationAnnul, transactionId, options);
        }

        #endregion
    }
}